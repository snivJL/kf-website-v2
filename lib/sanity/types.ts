/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type UseCaseItem = {
  _type: "useCaseItem";
  title?: string;
  hook?: string;
  buttonText?: string;
  buttonLink?: string;
  objective?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  painPoints?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  solution?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  benefits?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  korefocusRole?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type FaqItem = {
  _type: "faqItem";
  question?: string;
  answer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type StepsItem = {
  _type: "stepsItem";
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  index?: number;
};

export type WhatWeDoItem = {
  _type: "whatWeDoItem";
  title?: string;
  subtitle?: string;
  buttonText?: string;
  buttonLink?: string;
  blueLines?: Array<string>;
  grayLines?: Array<string>;
};

export type UseCase = {
  _id: string;
  _type: "useCase";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  subHeading?: string;
  description?: string;
  useCases?: Array<
    {
      _key: string;
    } & UseCaseItem
  >;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  faqItem?: Array<
    {
      _key: string;
    } & FaqItem
  >;
};

export type OurApproach = {
  _id: string;
  _type: "ourApproach";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  graySubHeading?: string;
  blueSubHeading?: string;
  steps?: Array<
    {
      _key: string;
    } & StepsItem
  >;
};

export type WhatWeDo = {
  _id: string;
  _type: "whatWeDo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  cards?: Array<
    {
      _key: string;
    } & WhatWeDoItem
  >;
};

export type Hero = {
  _id: string;
  _type: "hero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  headingBlue?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | UseCaseItem
  | FaqItem
  | StepsItem
  | WhatWeDoItem
  | UseCase
  | Faq
  | OurApproach
  | WhatWeDo
  | Hero
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Home
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../kf-website-frontend/app/page.tsx
// Variable: query
// Query: {  "hero": *[_type == "hero"][0] {    heading,    headingBlue,    image {      asset,      alt    }  },  "home": *[_type == "home"][0],  "whatWeDo": *[_type == "whatWeDo"][0] {    heading,    cards[] {      title,      subtitle,      buttonText,      buttonLink,      blueLines,      grayLines    }  },  "ourApproach": *[_type == "ourApproach"][0] {    heading,    graySubHeading,    blueSubHeading,    steps[] {      _key,      title,      index,      description[]    // if this is Portable Text    }  },  "faq": *[_type == "faq"][0] {    heading,    faqItem[] {      _key,      question,      answer[]         // Portable Text array    }  },  "useCase": *[_type == "useCase"][0] {    heading,    subHeading,    description,     // ‚Üê here!    useCaseItem[] {      _key,      title,      hook,      buttonText,      buttonLink,      objective[]{..., markDefs[]{...}},      painPoints[]{..., markDefs[]{...}},      solution[]{..., markDefs[]{...}},      benefits[]{..., markDefs[]{...}},      korefocusRole[]{..., markDefs[]{...}}    }  }}
export type QueryResult = {
  hero: {
    heading: string | null;
    headingBlue: string | null;
    image: {
      asset: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      } | null;
      alt: string | null;
    } | null;
  } | null;
  home: {
    _id: string;
    _type: "home";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
  } | null;
  whatWeDo: {
    heading: string | null;
    cards: Array<{
      title: string | null;
      subtitle: string | null;
      buttonText: string | null;
      buttonLink: string | null;
      blueLines: Array<string> | null;
      grayLines: Array<string> | null;
    }> | null;
  } | null;
  ourApproach: {
    heading: string | null;
    graySubHeading: string | null;
    blueSubHeading: string | null;
    steps: Array<{
      _key: string;
      title: string | null;
      index: number | null;
      description: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "blockquote"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  } | null;
  faq: {
    heading: string | null;
    faqItem: Array<{
      _key: string;
      question: string | null;
      answer: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "blockquote"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  } | null;
  useCase: {
    heading: string | null;
    subHeading: string | null;
    description: string | null;
    useCaseItem: null;
  } | null;
};

// // Query TypeMap
// import "@sanity/client";
// declare module "@sanity/client" {
//   interface SanityQueries {
//     "\n{\n  \"hero\": *[_type == \"hero\"][0] {\n    heading,\n    headingBlue,\n    image {\n      asset,\n      alt\n    }\n  },\n  \"home\": *[_type == \"home\"][0],\n  \"whatWeDo\": *[_type == \"whatWeDo\"][0] {\n    heading,\n    cards[] {\n      title,\n      subtitle,\n      buttonText,\n      buttonLink,\n      blueLines,\n      grayLines\n    }\n  },\n  \"ourApproach\": *[_type == \"ourApproach\"][0] {\n    heading,\n    graySubHeading,\n    blueSubHeading,\n    steps[] {\n      _key,\n      title,\n      index,\n      description[]    // if this is Portable Text\n    }\n  },\n  \"faq\": *[_type == \"faq\"][0] {\n    heading,\n    faqItem[] {\n      _key,\n      question,\n      answer[]         // Portable Text array\n    }\n  },\n  \"useCase\": *[_type == \"useCase\"][0] {\n    heading,\n    subHeading,\n    description,     // \u2190 here!\n    useCaseItem[] {\n      _key,\n      title,\n      hook,\n      buttonText,\n      buttonLink,\n      objective[]{..., markDefs[]{...}},\n      painPoints[]{..., markDefs[]{...}},\n      solution[]{..., markDefs[]{...}},\n      benefits[]{..., markDefs[]{...}},\n      korefocusRole[]{..., markDefs[]{...}}\n    }\n  }\n}\n": QueryResult;
//   }
// }
